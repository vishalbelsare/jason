/*
   Jason Gradle build file
*/

apply plugin: 'java-library'

defaultTasks 'config'

clean {
    delete 'bin'
    delete 'doc/api'
    delete 'doc/faq.html'
    delete 'doc/index.html'
    delete 'doc/readme.html'
    delete 'readme.html'
    delete 'doc/release-notes.html'

    delete fileTree('doc/tutorials')  { include '**/*.html'  }
    delete fileTree('doc/tech')       { include '**/*.html'  }
    delete fileTree('doc/tutorials')  { include '**/bin/**/*'  }

    delete fileTree('.')  { include '**/*~'  }
    delete fileTree('.')  { include '**/.stop___MAS'  }
    delete fileTree('.')  { include '**/APDescription.txt'  }
    delete fileTree('.')  { include '**/MTPs-Main-Container.txt'  }

    delete fileTree('examples')  { include '**/bin/**'  }
    delete fileTree('examples')  { include '**/*.log'  }
    delete fileTree('demos')  { include '**/bin/**'  }
    delete fileTree('demos')  { include '**/*.log'  }
    delete 'demos/persistent-belief-base/a.bb'

    def emptyDirs = []

    fileTree (dir: 'examples').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    fileTree (dir: 'demos').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    emptyDirs.reverseEach { it.delete() }
}

task createCLIBin (dependsOn: [':jason-cli:createBin']) {
    doLast {
        copy {
            from 'jason-cli/build/bin/jason'
            into 'bin'
        }
    }
}

task config (dependsOn: ['createCLIBin']) {
    doLast {
        println '------'
        println ''
        println 'you can set the Jason home directory with the following command:'
        println '     export JASON_HOME='+project.projectDir.absolutePath
        println ''
        println 'and also change your PATH with:'
        println '     export PATH=$JASON_HOME/bin:$PATH'
        println ''
        println '-----'
    }
}

// Builds the distribution, documentation and a new release
task doc(dependsOn: [ ':jason-interpreter:jjdoc', ':jason-interpreter:javadoc', 'renderAsciiDocs']) {
}

task renderAsciiDocs(type: Exec) {
    commandLine 'find', '.', '-name', '*.adoc', '-exec', 'doc/asciidoc-docker', '{}', ';'
}

// Builds the distribution, documentation and a new release
task release(dependsOn: [ 'doc', 'zipRel' ]) {
}

// copy files used to build a release
task copyRel (dependsOn: ['jar', 'createCLIBin']) {
  doLast {
    copy {
        from '.'
        into "build/jason-${jasonVersion}"
        include '*.html'
        include 'LICENSE'
        include 'doc/**'
    }
    // delete fileTree('build/jason-'+project.version+'/doc')  { include '**/*.adoc', '**/Makefile'  }

    copy {
        from 'bin'
        into "build/jason-${jasonVersion}/bin"
    }
    // copy {
    //     duplicatesStrategy = 'include'
    //     from 'build/libs'
    //     from configurations.runtimeClasspath
    //     into 'build/jason-'+project.version+'/libs'
    //     include '**/*.jar'
    // }
    copy {
        from 'examples'
        into "build/jason-${jasonVersion}/examples"
    }
    copy {
        from 'demos'
        into "build/jason-${jasonVersion}/demos"
    }
    // copy {
    //     from 'src'
    //     into 'build/jason-'+project.version+'/src'
    // }
  }
}

// // creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from "build/jason-${jasonVersion}"
    archiveBaseName = "jason-bin-${jasonVersion}"
}

